{"version":3,"sources":["./src/app/exercise/Exercise.ts","./src/app/exercise/exercises/ChordInKeyExercise/ChordsInKeyExercise.ts","./src/app/exercise/exercises/ChordInKeyExercise/chord-in-key-explanation/chord-in-key-explanation.component.ts","./src/app/exercise/exercises/ChordTypeInKeyExercise/ChordTypeInKeyExercise.ts","./src/app/exercise/exercises/ChordTypeInKeyExercise/chord-type-in-key-explanation/chord-type-in-key-explanation.component.ts","./src/app/exercise/exercises/CommonChordProgressionExercise/CommonChordProgressionsExercise.ts","./src/app/exercise/exercises/CommonChordProgressionExercise/common-chord-progressions-explanation/common-chord-progressions-explanation.component.ts","./src/app/exercise/exercises/IntervalExercise/IntervalExercise.ts","./src/app/exercise/exercises/IntervalExercise/interval-exercise-explanation/interval-exercise-explanation.component.ts","./src/app/exercise/exercises/NotesInKeyExercise/NotesInKeyExercise.ts","./src/app/exercise/exercises/NotesInKeyExercise/notes-in-key-explanation/notes-in-key-explanation.component.ts","./src/app/exercise/exercises/TriadInversionExercise/TriadInversionExercise.ts","./src/app/exercise/exercises/TriadInversionExercise/triad-inversion-explanation/triad-inversion-explanation.component.ts","./src/app/exercise/exercises/utility/BaseCommonSettingsExercise.ts","./src/app/exercise/exercises/utility/BaseExercise.ts","./src/app/exercise/exercises/utility/BaseRomanAnalysisChordProgressionExercise.ts","./src/app/exercise/exercises/utility/BaseTonalChordProgressionExercise.ts","./src/app/exercise/exercises/utility/BaseTonalExercise.ts","./src/app/exercise/exercises/utility/NumberOfSegmentsSetting.ts","./src/app/exercise/exercises/utility/PlayAfterCorrectAnswerSetting.ts","./src/app/exercise/services/exercise/exercise.service.ts","./src/app/exercise/utility/music/chords/Chord/Chord.ts","./src/app/exercise/utility/music/chords/chordProgressions.ts","./src/app/exercise/utility/music/chords/index.ts","./src/app/exercise/utility/music/chords/voiceChordProgressionWithVoiceLeading.ts","./src/app/exercise/utility/music/notes/getNoteOctave.ts","./src/app/exercise/exercises/ChordInKeyExercise/chord-in-key-explanation/chord-in-key-explanation.component.html","./src/app/exercise/exercises/ChordTypeInKeyExercise/chord-type-in-key-explanation/chord-type-in-key-explanation.component.html","./src/app/exercise/exercises/CommonChordProgressionExercise/common-chord-progressions-explanation/common-chord-progressions-explanation.component.html","./src/app/exercise/exercises/IntervalExercise/interval-exercise-explanation/interval-exercise-explanation.component.html","./src/app/exercise/exercises/NotesInKeyExercise/notes-in-key-explanation/notes-in-key-explanation.component.html","./src/app/exercise/exercises/TriadInversionExercise/triad-inversion-explanation/triad-inversion-explanation.component.html"],"names":[],"mappings":"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","file":"default-src_app_exercise_services_exercise_exercise_service_ts.js","sourcesContent":["import { NoteEvent } from '../services/player.service';\r\nimport { OneOrMany } from '../shared/ts-utility/toArray';\r\nimport { Note } from 'tone/Tone/core/type/NoteUnits';\r\nimport * as _ from 'lodash';\r\nimport { Type } from '@angular/core';\r\nimport { isValueTruthy } from '../shared/ts-utility';\r\n\r\nexport namespace Exercise {\r\n  export interface Question<GAnswer extends string = string> {\r\n    /**\r\n     * Use more then one segment for serial exercises\r\n     * Example: in a melodic dictation each note is a segment, it has its own answer\r\n     * */\r\n    segments: {\r\n      rightAnswer: GAnswer;\r\n      partToPlay: NoteEvent[] | OneOrMany<Note>;\r\n    }[],\r\n    /**\r\n     * To be played to give the listener a context of the part,\r\n     * Then the part can be played separately or with the cadence\r\n     * */\r\n    cadence?: NoteEvent[] | OneOrMany<Note>;\r\n    afterCorrectAnswer?: {\r\n      partToPlay: NoteEvent[],\r\n      answerToHighlight?: GAnswer,\r\n    }[];\r\n  }\r\n\r\n  export type Answer<GAnswer extends string = string> = GAnswer;\r\n\r\n  export interface AnswerLayoutCellConfig<GAnswer extends string> {\r\n    space?: number; // 1 (Default) means all cells takes the same space\r\n    answer: Answer<GAnswer> | null;\r\n  }\r\n\r\n  export interface AnswersLayout<GAnswer extends string = string> {\r\n    /**\r\n     * Null means an empty space\r\n     * */\r\n    rows: (Answer<GAnswer> | null | AnswerLayoutCellConfig<GAnswer>)[][];\r\n  }\r\n\r\n  export function normalizeAnswerLayoutCellConfig<GAnswer extends string = string>(cell: Answer<GAnswer> | null | AnswerLayoutCellConfig<GAnswer>): Required<AnswerLayoutCellConfig<GAnswer>> {\r\n    if (!cell || typeof cell !== 'object') {\r\n    return {\r\n      answer: cell,\r\n      space: 1,\r\n    };\r\n  }\r\n\r\n  return {\r\n    space: cell.space ?? 1,\r\n    answer: cell.answer,\r\n  };\r\n}\r\n\r\n  export type AnswerList<GAnswer extends string = string> = Answer<GAnswer>[] | AnswersLayout<GAnswer>;\r\n\r\n  export function flatAnswerList<GAnswer extends string>(answerList: AnswerList<GAnswer>): GAnswer[] {\r\n    return Array.isArray(answerList) ? answerList : _.flatMap(answerList.rows.map(row => row.map(cellConfig => {\r\n        if (typeof cellConfig === 'object') {\r\n          return cellConfig?.answer;\r\n        } else {\r\n          return cellConfig\r\n        }\r\n      }).filter(isValueTruthy),\r\n    ));\r\n  }\r\n\r\n  export interface BaseSettingsControlDescriptor {\r\n    controlType: string;\r\n    label: string;\r\n  }\r\n\r\n  export interface SliderControlDescriptor extends BaseSettingsControlDescriptor {\r\n    controlType: 'SLIDER';\r\n    min: number;\r\n    max: number;\r\n    step: number;\r\n  }\r\n\r\n  export interface SelectControlDescriptor extends BaseSettingsControlDescriptor {\r\n    controlType: 'SELECT',\r\n    options: {\r\n      label: string;\r\n      value: string | number,\r\n    }[],\r\n  }\r\n\r\n  export interface ListSelectControlDescriptor<GValue = string | number> extends BaseSettingsControlDescriptor {\r\n    controlType: 'LIST_SELECT';\r\n    allOptions: {\r\n      label: string,\r\n      value: GValue,\r\n    }[];\r\n  }\r\n\r\n  export interface CheckboxControlDescriptor extends BaseSettingsControlDescriptor {\r\n    controlType: 'CHECKBOX',\r\n  }\r\n\r\n  export type SettingValueType = number | string | boolean | (string | number)[];\r\n\r\n  /*\r\n   * adding a dummy redundant condition on GKey to force description of (potentially) union type GKey.\r\n   * Without such description the end result will be never.\r\n   * */\r\n  export type SettingsControlDescriptor<GSettings extends { [key: string]: SettingValueType } = { [key: string]: SettingValueType }/*, GKey extends keyof GSettings = keyof GSettings*/> = /*GKey extends string ?*/\r\n    {\r\n      key: /*GKey*/ keyof GSettings,\r\n      descriptor: /*GSettings[GKey] extends number ? SliderControlDescriptor | SelectControlDescriptor<GSettings[GKey]>\r\n        : GSettings[GKey] extends Array<any> ? ListSelectControlDescriptor\r\n          : SelectControlDescriptor<GSettings[GKey]>*/ SliderControlDescriptor | SelectControlDescriptor | ListSelectControlDescriptor | CheckboxControlDescriptor,\r\n      show?: (settings: GSettings) => boolean;\r\n    }/* : never*/;\r\n\r\n  export type ExerciseExplanationContent = string | Type<any>;\r\n\r\n  export interface IExercise<GAnswer extends string = string, GSettings extends { [key: string]: SettingValueType } = { [key: string]: SettingValueType }> {\r\n    /**\r\n     * Do not change the keys for the same exercise between versions, as it will break the persistent storage\r\n     * */\r\n    readonly id: string;\r\n    readonly name: string;\r\n    readonly summary: string;\r\n    readonly explanation: ExerciseExplanationContent;\r\n    readonly settingsDescriptor?: SettingsControlDescriptor<GSettings>[];\r\n\r\n    getAnswerList(): AnswerList<GAnswer>;\r\n\r\n    getQuestion(): Question<GAnswer>;\r\n\r\n    updateSettings?(settings: GSettings): void;\r\n\r\n    getCurrentSettings?(): GSettings;\r\n\r\n    onDestroy?(): void;\r\n  }\r\n}\r\n","import { Exercise } from '../../Exercise';\r\nimport { randomFromList } from '../../utility';\r\nimport * as _ from 'lodash';\r\nimport { numberOfSegmentsControlDescriptorList, NumberOfSegmentsSetting, } from '../utility/NumberOfSegmentsSetting';\r\nimport { ChordInKeyExplanationComponent } from './chord-in-key-explanation/chord-in-key-explanation.component';\r\nimport {\r\n  playAfterCorrectAnswerControlDescriptorList,\r\n  PlayAfterCorrectAnswerSetting\r\n} from '../utility/PlayAfterCorrectAnswerSetting';\r\nimport {\r\n  BaseRomanAnalysisChordProgressionExercise,\r\n  BaseRomanAnalysisChordProgressionExerciseSettings,\r\n  RomanNumeralChord,\r\n  RomanNumeralsChordProgressionQuestion\r\n} from '../utility/BaseRomanAnalysisChordProgressionExercise';\r\nimport ExerciseExplanationContent = Exercise.ExerciseExplanationContent;\r\n\r\ntype ChordInKeySettings =\r\n  BaseRomanAnalysisChordProgressionExerciseSettings &\r\n  NumberOfSegmentsSetting &\r\n  PlayAfterCorrectAnswerSetting;\r\n\r\nexport class ChordsInKeyExercise extends BaseRomanAnalysisChordProgressionExercise<ChordInKeySettings> {\r\n  readonly id: string = 'chordInKey';\r\n  readonly name: string = 'Chord in Key';\r\n  readonly summary: string = 'Identify chords based on their tonal context in a key';\r\n  readonly explanation: ExerciseExplanationContent = ChordInKeyExplanationComponent;\r\n\r\n  protected _getChordProgressionInRomanNumerals(): RomanNumeralsChordProgressionQuestion {\r\n    const numberOfSegments = this._settings.numberOfSegments;\r\n    const availableChords: RomanNumeralChord[] = this._settings.includedAnswers;\r\n    const chordProgression: RomanNumeralChord[] = [randomFromList(availableChords)];\r\n    while (chordProgression.length < numberOfSegments) {\r\n      chordProgression.push(randomFromList(availableChords.filter(chord => chord !== _.last(chordProgression)!)));\r\n    }\r\n\r\n    return {\r\n      chordProgressionInRomanAnalysis: chordProgression,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   * */\r\n  protected _getSettingsDescriptor(): Exercise.SettingsControlDescriptor<ChordInKeySettings>[] {\r\n    return [\r\n      ...super._getSettingsDescriptor(),\r\n      ...numberOfSegmentsControlDescriptorList('chords'),\r\n      ...playAfterCorrectAnswerControlDescriptorList({\r\n        show: ((settings: ChordInKeySettings) => settings.numberOfSegments === 1),\r\n      }),\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   * */\r\n  protected _getDefaultSettings(): ChordInKeySettings {\r\n    return {\r\n      ...super._getDefaultSettings(),\r\n      numberOfSegments: 1,\r\n      playAfterCorrectAnswer: true,\r\n    };\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { NoteEvent } from '../../../../services/player.service';\r\nimport { Chord, ChordSymbol, IV_V_I_CADENCE_IN_C, TriadInversion } from '../../../utility/music/chords';\r\n\r\n@Component({\r\n  selector: 'app-chord-in-key-explanation',\r\n  templateUrl: './chord-in-key-explanation.component.html',\r\n})\r\nexport class ChordInKeyExplanationComponent {\r\n  getChordExample(chordSymbol: ChordSymbol, topVoicesInversion: TriadInversion): NoteEvent[] {\r\n    return [\r\n      ...IV_V_I_CADENCE_IN_C,\r\n      {\r\n        notes: [],\r\n        duration: '4n',\r\n      },\r\n      {\r\n        notes: new Chord(chordSymbol).getVoicing({topVoicesInversion}),\r\n        velocity: 0.3,\r\n        duration: '1n',\r\n      },\r\n    ];\r\n  }\r\n\r\n  readonly cadenceAndIChord: NoteEvent[] = this.getChordExample('C', TriadInversion.Octave);\r\n\r\n  readonly cadenceAndVChord: NoteEvent[] = this.getChordExample('G', TriadInversion.Third);\r\n}\r\n","import { Exercise } from '../../Exercise';\r\nimport {\r\n  Chord,\r\n  ChordType,\r\n  ChordSymbol,\r\n} from '../../utility/music/chords';\r\nimport { randomFromList } from '../../../shared/ts-utility';\r\nimport {\r\n  NumberOfSegmentsSetting,\r\n  numberOfSegmentsControlDescriptorList\r\n} from '../utility/NumberOfSegmentsSetting';\r\nimport * as _ from 'lodash';\r\nimport {\r\n  BaseTonalChordProgressionExercise,\r\n  ChordProgressionQuestion,\r\n  BaseTonalChordProgressionExerciseSettings\r\n} from '../utility/BaseTonalChordProgressionExercise';\r\nimport { ChordTypeInKeyExplanationComponent } from './chord-type-in-key-explanation/chord-type-in-key-explanation.component';\r\nimport ExerciseExplanationContent = Exercise.ExerciseExplanationContent;\r\n\r\nconst chordsInC: ChordSymbol[] = [\r\n  'C',\r\n  'Dm',\r\n  'Em',\r\n  'F',\r\n  'G',\r\n  'Am',\r\n]\r\n\r\ntype ChordTypeInKeySettings = NumberOfSegmentsSetting & BaseTonalChordProgressionExerciseSettings<ChordType>;\r\n\r\nexport class ChordTypeInKeyExercise extends BaseTonalChordProgressionExercise<ChordType, ChordTypeInKeySettings> {\r\n  readonly id: string = 'chordTypeInKey';\r\n  readonly name: string = 'Chord type in key';\r\n  readonly summary: string = 'Identify chord type (major / minor) when all chords are diatonic to the same key';\r\n  readonly explanation: ExerciseExplanationContent = ChordTypeInKeyExplanationComponent;\r\n\r\n  protected _getChordProgressionInC(): ChordProgressionQuestion<ChordType> {\r\n    const chordProgression: Chord[] = [new Chord(randomFromList(chordsInC))];\r\n    while (chordProgression.length < this._settings.numberOfSegments) {\r\n      chordProgression.push(new Chord(randomFromList(chordsInC.filter(chord => chord !== _.last(chordProgression)!.symbol))));\r\n    }\r\n\r\n    return {\r\n      segments: chordProgression\r\n        .map((chord: Chord): ChordProgressionQuestion<ChordType>['segments'][0] => {\r\n          return {\r\n            answer: chord.type,\r\n            chord: chord,\r\n          }\r\n        })\r\n    }\r\n  }\r\n\r\n  getQuestion(): Exercise.Question<ChordType> {\r\n    return {\r\n      ...super.getQuestion(),\r\n      cadence: undefined,\r\n    }\r\n  }\r\n\r\n  protected _getAllAnswersList(): Exercise.AnswerList<ChordType> {\r\n    return [\r\n      'M',\r\n      'm',\r\n    ];\r\n  }\r\n\r\n  protected _getSettingsDescriptor(): Exercise.SettingsControlDescriptor<ChordTypeInKeySettings>[] {\r\n    return [\r\n      ...super._getSettingsDescriptor(),\r\n      ...numberOfSegmentsControlDescriptorList('chords'),\r\n    ]\r\n  }\r\n\r\n  protected _getDefaultSettings(): ChordTypeInKeySettings {\r\n    return {\r\n      ...super._getDefaultSettings(),\r\n      numberOfSegments: 1,\r\n    };\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-chord-type-in-key-explanation',\r\n  templateUrl: './chord-type-in-key-explanation.component.html',\r\n})\r\nexport class ChordTypeInKeyExplanationComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {}\r\n\r\n}\r\n","import {\r\n  BaseRomanAnalysisChordProgressionExercise,\r\n  BaseRomanAnalysisChordProgressionExerciseSettings,\r\n  RomanNumeralChord,\r\n  RomanNumeralsChordProgressionQuestion\r\n} from '../utility/BaseRomanAnalysisChordProgressionExercise';\r\nimport { Exercise } from '../../Exercise';\r\nimport { randomFromList } from '../../../shared/ts-utility';\r\nimport { distinctUntilChanged, map, startWith, takeUntil } from 'rxjs/operators';\r\nimport * as _ from 'lodash';\r\nimport {\r\n  CommonChordProgressionsExplanationComponent\r\n} from './common-chord-progressions-explanation/common-chord-progressions-explanation.component';\r\n\r\ntype CommonChordProgressionExerciseSettings = BaseRomanAnalysisChordProgressionExerciseSettings & {\r\n  includedProgressions: string[];\r\n};\r\n\r\ninterface ProgressionDescriptor {\r\n  romanNumerals: RomanNumeralChord[],\r\n  name?: string,\r\n}\r\n\r\nexport class CommonChordProgressionsExercise extends BaseRomanAnalysisChordProgressionExercise<CommonChordProgressionExerciseSettings> {\r\n  private static readonly _progression: ProgressionDescriptor[] = [\r\n    {\r\n      romanNumerals: ['I', 'V', 'I'],\r\n      name: 'Perfect Cadence'\r\n    },\r\n    {\r\n      romanNumerals: ['I', 'IV', 'I'],\r\n      name: 'Plagal Cadence',\r\n    },\r\n    {\r\n      romanNumerals: ['I', 'IV', 'V', 'I'],\r\n      name: 'Classical Cadence',\r\n    },\r\n    {\r\n      romanNumerals: ['I', 'V', 'IV', 'I'],\r\n      name: 'Blues Cadence',\r\n    },\r\n    {\r\n      romanNumerals: ['I', 'V', 'vi', 'IV'],\r\n      name: 'Axis (optimistic)',\r\n    },\r\n    {\r\n      romanNumerals: ['I', 'V', 'vi', 'IV'],\r\n      name: 'Axis (optimistic)',\r\n    },\r\n    {\r\n      romanNumerals: ['V', 'vi', 'IV', 'I'],\r\n      name: 'Axis'\r\n    },\r\n    {\r\n      romanNumerals: ['vi', 'IV', 'I', 'V'],\r\n      name: 'Axis (pessimistic)',\r\n    },\r\n    {\r\n      romanNumerals: ['IV', 'I', 'V', 'vi'],\r\n      name: 'Axis'\r\n    },\r\n    {\r\n      romanNumerals: ['I', 'vi', 'IV', 'V'],\r\n      name: 'Doo-Wop / 50s',\r\n    },\r\n    {\r\n      romanNumerals: ['I', 'vi', 'ii', 'V'],\r\n      name: 'Circle'\r\n    },\r\n    {\r\n      romanNumerals: ['I', 'vi', 'iii'],\r\n      name: 'Circle'\r\n    },\r\n    {\r\n      romanNumerals: ['I', 'vi', 'iii'],\r\n    },\r\n    {\r\n      romanNumerals: ['I', 'vi', 'iii', 'IV'],\r\n    }\r\n  ]\r\n\r\n  private static readonly _defaultProgressions: string[] = [\r\n    'I V vi IV',\r\n    'I vi IV V',\r\n  ]\r\n\r\n  private static _getProgressionId(progression: ProgressionDescriptor): string {\r\n    return progression.romanNumerals.join(' ');\r\n  }\r\n\r\n  readonly explanation: Exercise.ExerciseExplanationContent = CommonChordProgressionsExplanationComponent;\r\n  readonly id: string = 'commonChordProgression'\r\n  readonly name: string = 'Common Progressions'\r\n  readonly summary: string = 'Practice on recognizing the most common chord progression in popular music.'\r\n\r\n  constructor() {\r\n    super();\r\n    this._startIncludedProgressionsChangeHandler();\r\n  }\r\n\r\n  protected _getChordProgressionInRomanNumerals(): RomanNumeralsChordProgressionQuestion {\r\n    const includedProgressions: ProgressionDescriptor[] = this._getIncludedProgressionsDescriptors();\r\n    return {\r\n      chordProgressionInRomanAnalysis: randomFromList(includedProgressions.map(progression => progression.romanNumerals))\r\n    };\r\n  }\r\n\r\n  protected _getSettingsDescriptor(): Exercise.SettingsControlDescriptor<CommonChordProgressionExerciseSettings>[] {\r\n    return [\r\n      {\r\n        key: 'includedProgressions',\r\n        descriptor: {\r\n          controlType: 'LIST_SELECT',\r\n          label: 'Included Options',\r\n          allOptions: CommonChordProgressionsExercise._progression.map(progression => ({\r\n            value: CommonChordProgressionsExercise._getProgressionId(progression),\r\n            label: CommonChordProgressionsExercise._getProgressionId(progression) + (progression.name ? ` (${progression.name})` : ''),\r\n          })),\r\n        },\r\n      }\r\n    ];\r\n  }\r\n\r\n  protected _getDefaultSettings(): CommonChordProgressionExerciseSettings {\r\n    return {\r\n      ...super._getDefaultSettings(),\r\n      includedProgressions: CommonChordProgressionsExercise._defaultProgressions,\r\n    }\r\n  }\r\n\r\n  private _startIncludedProgressionsChangeHandler(): void {\r\n    this._settings$.pipe(\r\n      map(settings => settings.includedProgressions),\r\n      startWith(CommonChordProgressionsExercise._defaultProgressions),\r\n      distinctUntilChanged(),\r\n      takeUntil(this._destroy$),\r\n    ).subscribe(() => {\r\n      this.updateSettings({\r\n        ...this._settings,\r\n        includedAnswers: _.uniq(_.flatMap(this._getIncludedProgressionsDescriptors(), 'romanNumerals'))\r\n      })\r\n    })\r\n  }\r\n\r\n  private _getIncludedProgressionsDescriptors(): ProgressionDescriptor[] {\r\n    return CommonChordProgressionsExercise._progression.filter(progression => {\r\n      return this._settings.includedProgressions.includes(CommonChordProgressionsExercise._getProgressionId(progression));\r\n    })\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-common-chord-progressions-explanation',\r\n  templateUrl: './common-chord-progressions-explanation.component.html',\r\n})\r\nexport class CommonChordProgressionsExplanationComponent {\r\n}\r\n","import * as _ from 'lodash';\r\nimport { Exercise, } from '../../Exercise';\r\nimport {\r\n  randomFromList,\r\n  NotesRange,\r\n  toNoteName\r\n} from '../../utility';\r\nimport { NoteNumber } from '../../utility/music/notes/NoteNumberOrName';\r\nimport { BaseCommonSettingsExercise } from '../utility/BaseCommonSettingsExercise';\r\nimport {IntervalExerciseExplanationComponent} from \"./interval-exercise-explanation/interval-exercise-explanation.component\";\r\n\r\ntype Interval = 'Minor 2nd' | 'Major 2nd' | 'Minor 3rd' | 'Major 3rd' | 'Perfect 4th' | 'Aug 4th' | 'Perfect 5th' | 'Minor 6th' | 'Major 6th' | 'Minor 7th' | 'Major 7th' | 'Octave';\r\n\r\nexport interface IIntervalDescriptor {\r\n  name: Interval;\r\n  semitones: number;\r\n}\r\n\r\nexport class IntervalExercise extends BaseCommonSettingsExercise<Interval> {\r\n  readonly id: string = 'interval';\r\n  readonly name: string = 'Intervals';\r\n  readonly summary: string = 'Identify intervals without context';\r\n  readonly explanation = IntervalExerciseExplanationComponent;\r\n  readonly range = new NotesRange('C3', 'E5');\r\n\r\n  static readonly intervalDescriptorList: IIntervalDescriptor[] = [\r\n    {\r\n      name: 'Minor 2nd',\r\n      semitones: 1,\r\n    },\r\n    {\r\n      name: 'Major 2nd',\r\n      semitones: 2,\r\n    },\r\n    {\r\n      name: 'Minor 3rd',\r\n      semitones: 3,\r\n    },\r\n    {\r\n      name: 'Major 3rd',\r\n      semitones: 4,\r\n    },\r\n    {\r\n      name: 'Perfect 4th',\r\n      semitones: 5,\r\n    },\r\n    {\r\n      name: 'Aug 4th',\r\n      semitones: 6,\r\n    },\r\n    {\r\n      name: 'Perfect 5th',\r\n      semitones: 7,\r\n    },\r\n    {\r\n      name: 'Minor 6th',\r\n      semitones: 8,\r\n    },\r\n    {\r\n      name: 'Major 6th',\r\n      semitones: 9,\r\n    },\r\n    {\r\n      name: 'Minor 7th',\r\n      semitones: 10,\r\n    },\r\n    {\r\n      name: 'Major 7th',\r\n      semitones: 11,\r\n    },\r\n    {\r\n      name: 'Octave',\r\n      semitones: 12,\r\n    },\r\n  ]\r\n\r\n  getQuestion(): Exercise.Question<Interval> {\r\n    const randomIntervalDescriptor: IIntervalDescriptor = randomFromList(IntervalExercise.intervalDescriptorList.filter(intervalDescriptor => this._settings.includedAnswers.includes(intervalDescriptor.name)));\r\n    const randomStartingNote: NoteNumber = _.random(this.range.lowestNoteNumber, this.range.highestNoteNumber - randomIntervalDescriptor.semitones);\r\n    return {\r\n      segments: [{\r\n        rightAnswer: randomIntervalDescriptor.name,\r\n        partToPlay: _.shuffle([\r\n          toNoteName(randomStartingNote),\r\n          toNoteName(randomStartingNote + randomIntervalDescriptor.semitones),\r\n        ]),\r\n      }],\r\n    }\r\n  }\r\n\r\n  protected _getAllAnswersList(): Exercise.AnswerList<Interval> {\r\n    return _.map(IntervalExercise.intervalDescriptorList, 'name');\r\n  }\r\n}\r\n","import {Component} from '@angular/core';\r\nimport {IIntervalDescriptor, IntervalExercise} from \"../IntervalExercise\";\r\nimport {NoteEvent} from \"../../../../services/player.service\";\r\nimport {OneOrMany, toNoteNumber} from \"../../../utility\";\r\nimport {NoteNumberOrName} from \"../../../utility/music/notes/NoteNumberOrName\";\r\n\r\n@Component({\r\n  selector: 'app-interval-exercise-explanation',\r\n  templateUrl: './interval-exercise-explanation.component.html',\r\n})\r\nexport class IntervalExerciseExplanationComponent {\r\n  readonly intervalDescriptorList: (IIntervalDescriptor & {toPlay: OneOrMany<OneOrMany<NoteNumberOrName> | NoteEvent>})[] = IntervalExercise.intervalDescriptorList.map(interval => ({\r\n    ...interval,\r\n    toPlay: ['C4', toNoteNumber('C4') + interval.semitones],\r\n  }));\r\n}\r\n","import { Exercise, } from '../../Exercise';\r\nimport { NotesRange, randomFromList } from '../../utility';\r\nimport { Note } from 'tone/Tone/core/type/NoteUnits';\r\nimport { getNoteType } from '../../utility/music/notes/getNoteType';\r\nimport { BaseTonalExercise, BaseTonalExerciseSettings, } from '../utility/BaseTonalExercise';\r\nimport { NoteType } from '../../utility/music/notes/NoteType';\r\nimport * as _ from 'lodash';\r\nimport { getNoteOctave } from '../../utility/music/notes/getNoteOctave';\r\nimport { toNoteTypeNumber } from '../../utility/music/notes/toNoteTypeNumber';\r\nimport { noteTypeToNote } from '../../utility/music/notes/noteTypeToNote';\r\nimport { NotesInKeyExplanationComponent } from './notes-in-key-explanation/notes-in-key-explanation.component';\r\nimport { numberOfSegmentsControlDescriptorList, NumberOfSegmentsSetting } from '../utility/NumberOfSegmentsSetting';\r\nimport {\r\n  playAfterCorrectAnswerControlDescriptorList,\r\n  PlayAfterCorrectAnswerSetting\r\n} from '../utility/PlayAfterCorrectAnswerSetting';\r\n\r\nexport type SolfegeNote = 'Do' | 'Re' | 'Me' | 'Mi' | 'Fa' | 'Sol' | 'Le' | 'La' | 'Te' | 'Ti';\r\n\r\ntype NoteInKeySettings =\r\n  BaseTonalExerciseSettings<SolfegeNote> &\r\n  NumberOfSegmentsSetting &\r\n  PlayAfterCorrectAnswerSetting;\r\n\r\nconst solfegeNotesInC: { solfege: SolfegeNote, note: NoteType }[] = [\r\n  {\r\n    note: 'C',\r\n    solfege: 'Do',\r\n  },\r\n  {\r\n    note: 'D',\r\n    solfege: 'Re',\r\n  },\r\n  {\r\n    note: 'D#', // using sharps to avoid ambiguity even when musically incorrect\r\n    solfege: 'Me',\r\n  },\r\n  {\r\n    note: 'E',\r\n    solfege: 'Mi',\r\n  },\r\n  {\r\n    note: 'E',\r\n    solfege: 'Mi',\r\n  },\r\n  {\r\n    note: 'F',\r\n    solfege: 'Fa',\r\n  },\r\n  {\r\n    note: 'G',\r\n    solfege: 'Sol',\r\n  },\r\n  {\r\n    note: 'A',\r\n    solfege: 'La',\r\n  },\r\n  {\r\n    note: 'G#',\r\n    solfege: 'Le',\r\n  },\r\n  {\r\n    note: 'A#',\r\n    solfege: 'Te',\r\n  },\r\n  {\r\n    note: 'B',\r\n    solfege: 'Ti',\r\n  },\r\n]\r\nconst noteInCToSolfege: { [note in NoteType]?: SolfegeNote } = _.mapValues(_.keyBy(solfegeNotesInC, 'note'), 'solfege');\r\n\r\nexport class NotesInKeyExercise extends BaseTonalExercise<SolfegeNote, NoteInKeySettings> {\r\n  readonly id: string = 'noteInKey';\r\n  readonly name: string = `Notes in Key`;\r\n  readonly summary: string = `Identify notes based on their tonal context in a major scale`;\r\n  readonly explanation = NotesInKeyExplanationComponent;\r\n  readonly rangeForKeyOfC = new NotesRange('G2', 'E4');\r\n  readonly questionOptionsInC: { answer: SolfegeNote; question: Note }[] = this._getQuestionOptionsInC();\r\n\r\n  getQuestionInC(): Exclude<Exercise.Question<SolfegeNote>, 'cadence'> {\r\n    const randomQuestionsInC: { answer: SolfegeNote; question: Note }[] = Array.from(Array(this._settings.numberOfSegments))\r\n      .map(() => randomFromList(this.questionOptionsInC.filter(questionOption => this._settings.includedAnswers.includes(questionOption.answer))));\r\n\r\n    // calculation resolution\r\n    let resolution: Note[] = [];\r\n    if (this._settings.numberOfSegments === 1 && this._settings.playAfterCorrectAnswer) {\r\n      const randomQuestionInC = randomQuestionsInC[0];\r\n\r\n      /**\r\n       * Temporary solution, in the future we should either automatically detect it, or enable the user to set it in the setting\r\n       * */\r\n      const detectedScale: NoteType[] = this._settings.cadenceType === 'I IV V I' ? ['C', 'D', 'E', 'F', 'G', 'A', 'B'] : ['C', 'D', 'Eb', 'F', 'G', 'Ab', 'B'];\r\n\r\n      const noteOctave: number = getNoteOctave(randomQuestionInC.question);\r\n      const noteType: NoteType = getNoteType(randomQuestionInC.question);\r\n      if (toNoteTypeNumber(noteType) < toNoteTypeNumber('G')) {\r\n        const range = new NotesRange(noteTypeToNote('C', noteOctave), randomQuestionInC.question);\r\n        resolution = range.getAllNotes(detectedScale).reverse();\r\n      } else {\r\n        const range = new NotesRange(randomQuestionInC.question, noteTypeToNote('C', noteOctave + 1));\r\n        resolution = range.getAllNotes(detectedScale);\r\n      }\r\n\r\n      if (resolution[0] !== randomQuestionInC.question) {\r\n        resolution.unshift(randomQuestionInC.question);\r\n      }\r\n    }\r\n\r\n    return {\r\n      segments: randomQuestionsInC.map(randomQuestionInC => ({\r\n        rightAnswer: randomQuestionInC.answer,\r\n        partToPlay: [{\r\n          notes: randomQuestionInC.question,\r\n          duration: '2n',\r\n        }],\r\n      })),\r\n      afterCorrectAnswer: resolution.map((note, index) => ({\r\n        partToPlay: [{\r\n          notes: note,\r\n          duration: index === 0 ? '4n' : index === resolution.length - 1 ? '2n' : '8n',\r\n        }],\r\n        answerToHighlight: noteInCToSolfege[getNoteType(note)],\r\n      })),\r\n    }\r\n  }\r\n\r\n  protected _getAllAnswersList(): Exercise.AnswerList<SolfegeNote> {\r\n    return {\r\n      rows: [\r\n        [\r\n          {\r\n            answer: null,\r\n            space: 0.58\r\n          },\r\n          null, // Ra (to be added in the future to support more modes)\r\n          'Me',\r\n          null,\r\n          null, // Fi / Se (to be added in the future to support more modes)\r\n          'Le',\r\n          'Te',\r\n          {\r\n            answer: null,\r\n            space: 0.58,\r\n          },\r\n          null,\r\n        ],\r\n        [\r\n          'Do',\r\n          'Re',\r\n          'Mi',\r\n          'Fa',\r\n          'Sol',\r\n          'La',\r\n          'Ti',\r\n          'Do',\r\n        ],\r\n      ],\r\n    }\r\n  }\r\n\r\n  private _getQuestionOptionsInC(): { answer: SolfegeNote; question: Note }[] {\r\n    return this.rangeForKeyOfC.getAllNotes()\r\n    .filter((note: Note) => noteInCToSolfege[getNoteType(note)])\r\n    .map((note: Note): { answer: SolfegeNote; question: Note } => {\r\n      return {\r\n        question: note,\r\n        answer: noteInCToSolfege[getNoteType(note)]!,\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   * */\r\n  protected _getSettingsDescriptor(): Exercise.SettingsControlDescriptor<NoteInKeySettings>[] {\r\n    return [\r\n      ...super._getSettingsDescriptor(),\r\n      ...numberOfSegmentsControlDescriptorList('notes'),\r\n      ...playAfterCorrectAnswerControlDescriptorList({\r\n        show: ((settings: NoteInKeySettings) => settings.numberOfSegments === 1),\r\n      }),\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   * */\r\n  protected _getDefaultSettings(): NoteInKeySettings {\r\n    return {\r\n      ...super._getDefaultSettings(),\r\n      numberOfSegments: 1,\r\n      playAfterCorrectAnswer: true,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @Override\r\n   * */\r\n  protected _getIncludedAnswersOptions(): SolfegeNote[] {\r\n    return [\r\n      'Do',\r\n      'Re',\r\n      'Me',\r\n      'Mi',\r\n      'Fa',\r\n      'Sol',\r\n      'Le',\r\n      'La',\r\n      'Te',\r\n      'Ti',\r\n    ]\r\n  }\r\n\r\n  /**\r\n   * @Override\r\n   * */\r\n  protected _getDefaultSelectedIncludedAnswers(): SolfegeNote[] {\r\n    return [\r\n      'Do',\r\n      'Re',\r\n      'Mi',\r\n    ]\r\n  }\r\n}\r\n","import {Component} from '@angular/core';\r\nimport {NoteEvent} from \"../../../../services/player.service\";\r\nimport {IV_V_I_CADENCE_IN_C} from \"../../../utility/music/chords\";\r\n\r\n@Component({\r\n  selector: 'app-notes-in-key-explanation',\r\n  templateUrl: './notes-in-key-explanation.component.html',\r\n})\r\nexport class NotesInKeyExplanationComponent {\r\n  resolutionOfReInC: NoteEvent[] = [\r\n    ...IV_V_I_CADENCE_IN_C,\r\n    {\r\n      notes: 'D3',\r\n      duration: '2n.',\r\n    },\r\n    {\r\n      notes: 'C3',\r\n      duration: '2n',\r\n    }\r\n  ];\r\n}\r\n","import { BaseTonalExercise, BaseTonalExerciseSettings } from '../utility/BaseTonalExercise';\r\nimport { Exercise } from '../../Exercise';\r\nimport {\r\n  ChordSymbol,\r\n  TriadInversion,\r\n  Chord,\r\n} from '../../utility/music/chords';\r\nimport { randomFromList } from '../../../shared/ts-utility';\r\nimport { BaseCommonSettingsExerciseSettings } from '../utility/BaseCommonSettingsExercise';\r\nimport SettingsControlDescriptor = Exercise.SettingsControlDescriptor;\r\nimport * as Tone from 'tone';\r\nimport { Note } from 'tone/Tone/core/type/NoteUnits';\r\nimport { toSteadyPart } from '../../utility';\r\nimport ExerciseExplanationContent = Exercise.ExerciseExplanationContent;\r\nimport { TriadInversionExplanationComponent } from './triad-inversion-explanation/triad-inversion-explanation.component';\r\n\r\ntype TriadInversionAnswer = 'Root Position' | '1st Inversion' | '2nd Inversion'\r\n\r\nconst triadInversions: TriadInversionAnswer[] = [\r\n  'Root Position',\r\n  '1st Inversion',\r\n  '2nd Inversion',\r\n];\r\n\r\nexport type TriadInversionExerciseSettings = BaseTonalExerciseSettings<TriadInversionAnswer> & {\r\n  arpeggiateSpeed: number;\r\n  playRootAfterAnswer: boolean;\r\n}\r\n\r\nexport class TriadInversionExercise extends BaseTonalExercise<TriadInversionAnswer, TriadInversionExerciseSettings> {\r\n  readonly id: string = 'triadInversions';\r\n  readonly name: string = 'Triad Inversions';\r\n  readonly summary: string = 'Find the inversion of a triad in close position';\r\n  readonly explanation: ExerciseExplanationContent = TriadInversionExplanationComponent;\r\n\r\n  getQuestionInC(): Exclude<Exercise.Question<TriadInversionAnswer>, 'cadence'> {\r\n    const chordsInC: ChordSymbol[] = ['C', 'Dm', 'Em', 'F', 'G', 'Am'];\r\n    const randomChordInC: ChordSymbol = randomFromList(chordsInC);\r\n    const randomTriadInversion: TriadInversion = randomFromList([0, 1, 2]);\r\n    const answer = triadInversions[randomTriadInversion];\r\n    const voicing: Note[] = new Chord(randomChordInC).getVoicing({\r\n      topVoicesInversion: randomTriadInversion,\r\n      withBass: false,\r\n      octave: 3, // picking a lower octave as a high one is more difficult\r\n    });\r\n    const question: Exercise.Question<TriadInversionAnswer> = {\r\n      segments: [\r\n        {\r\n          partToPlay: voicing.map((note, index) => {\r\n            const noteDelay = index * this._settings.arpeggiateSpeed / 100;\r\n            return {\r\n              notes: note,\r\n              velocity: 0.3,\r\n              duration: Tone.Time('1n').toSeconds() + (voicing.length - 1) * this._settings.arpeggiateSpeed / 100 - Tone.Time(noteDelay).toSeconds(),\r\n              time: noteDelay,\r\n            }\r\n          }),\r\n          rightAnswer: answer,\r\n        }\r\n      ],\r\n    };\r\n\r\n    if (this._settings.playRootAfterAnswer) {\r\n      question.afterCorrectAnswer =[\r\n        {\r\n          partToPlay: toSteadyPart(voicing[(3 - randomTriadInversion) % 3], '1n', 0.3),\r\n          answerToHighlight: answer,\r\n        },\r\n      ]\r\n    }\r\n\r\n    return question;\r\n  }\r\n\r\n  getQuestion(): Exercise.Question<TriadInversionAnswer> {\r\n    return {\r\n      ...super.getQuestion(),\r\n      cadence: undefined,\r\n    }\r\n  }\r\n\r\n  protected _getAllAnswersList(): Exercise.AnswerList<TriadInversionAnswer> {\r\n    return {\r\n      rows: triadInversions.map(triadInversion => [triadInversion]),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   * */\r\n  protected _getSettingsDescriptor(): SettingsControlDescriptor<TriadInversionExerciseSettings>[] {\r\n    return [\r\n      ...super._getSettingsDescriptor(),\r\n      {\r\n        key: 'arpeggiateSpeed',\r\n        descriptor: {\r\n          controlType: 'SLIDER',\r\n          label: 'Arpeggiate Speed',\r\n          min: 0,\r\n          max: 100,\r\n          step: 1,\r\n        }\r\n      },\r\n      {\r\n        key: 'playRootAfterAnswer',\r\n        descriptor: {\r\n          controlType: 'CHECKBOX',\r\n          label: 'Play Root After Correct Answer',\r\n        }\r\n      }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   * */\r\n  protected _getDefaultSettings(): TriadInversionExerciseSettings {\r\n    return {\r\n      ...super._getDefaultSettings(),\r\n      arpeggiateSpeed: 0,\r\n      playRootAfterAnswer: true,\r\n    };\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-triad-inversion-explanation',\r\n  templateUrl: './triad-inversion-explanation.component.html',\r\n})\r\nexport class TriadInversionExplanationComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {}\r\n\r\n}\r\n","import { Exercise } from '../../Exercise';\r\nimport { BaseExercise } from './BaseExercise';\r\nimport AnswerList = Exercise.AnswerList;\r\nimport SettingsControlDescriptor = Exercise.SettingsControlDescriptor;\r\nimport ListSelectControlDescriptor = Exercise.ListSelectControlDescriptor;\r\nimport * as _ from 'lodash';\r\nimport normalizeAnswerLayoutCellConfig = Exercise.normalizeAnswerLayoutCellConfig;\r\nimport AnswerLayoutCellConfig = Exercise.AnswerLayoutCellConfig;\r\n\r\nexport type BaseCommonSettingsExerciseSettings<GAnswer extends string> = {\r\n  includedAnswers: GAnswer[];\r\n}\r\n\r\nexport abstract class BaseCommonSettingsExercise<GAnswer extends string = string, GSettings extends BaseCommonSettingsExerciseSettings<GAnswer> = BaseCommonSettingsExerciseSettings<GAnswer>> extends BaseExercise<GAnswer, GSettings> {\r\n  private _allAnswersList: AnswerList<GAnswer> = this._getAllAnswersList();\r\n  readonly settingsDescriptor = this._getSettingsDescriptor();\r\n  protected _settings: GSettings = this._getDefaultSettings();\r\n\r\n  getAnswerList(): AnswerList<GAnswer> {\r\n    const includedAnswersList: GAnswer[] = this._settings.includedAnswers;\r\n\r\n    if (Array.isArray(this._allAnswersList)) {\r\n      return _.filter(this._allAnswersList, (answer => includedAnswersList.includes(answer)));\r\n    }\r\n\r\n    const normalizedAnswerLayout: {\r\n      rows: Required<AnswerLayoutCellConfig<GAnswer>>[][],\r\n    } = {\r\n      rows: this._allAnswersList.rows.map((row): Required<AnswerLayoutCellConfig<GAnswer>>[] => row.map(normalizeAnswerLayoutCellConfig)),\r\n    }\r\n\r\n    return {\r\n      rows: normalizedAnswerLayout.rows.map((row: Required<AnswerLayoutCellConfig<GAnswer>>[]): Required<AnswerLayoutCellConfig<GAnswer>>[] => _.map(row, answerLayoutCellConfig => answerLayoutCellConfig.answer && includedAnswersList.includes(answerLayoutCellConfig.answer) ? answerLayoutCellConfig : {\r\n        ...answerLayoutCellConfig,\r\n        answer: null, // In the future it's possible we'll want to configure a button to be disabled instead of hidden in this case\r\n      }))\r\n    }\r\n  }\r\n\r\n  protected abstract _getAllAnswersList(): AnswerList<GAnswer>;\r\n\r\n  protected _getSettingsDescriptor(): SettingsControlDescriptor<GSettings>[] {\r\n    const includedAnswersDescriptor: ListSelectControlDescriptor<GAnswer> = {\r\n      controlType: 'LIST_SELECT',\r\n      label: 'Included Options',\r\n      allOptions: this._getIncludedAnswersOptions().map(answer => ({\r\n        value: answer,\r\n        label: answer,\r\n      })),\r\n    }\r\n    const settingsDescriptorList: SettingsControlDescriptor<BaseCommonSettingsExerciseSettings<GAnswer>>[] = [\r\n      {\r\n        key: 'includedAnswers',\r\n        descriptor: includedAnswersDescriptor,\r\n      }\r\n    ];\r\n    // couldn't find a better way around it, it means that extending classes will have the responsibility to override this property\r\n    return settingsDescriptorList as SettingsControlDescriptor<GSettings>[];\r\n  }\r\n\r\n  protected _getDefaultSettings(): GSettings {\r\n    return {\r\n      includedAnswers: this._getDefaultSelectedIncludedAnswers(),\r\n    } as GSettings; // couldn't find a better way around it, it means that extending classes will have the responsibility to override this property\r\n  }\r\n\r\n  protected _getDefaultSelectedIncludedAnswers(): GAnswer[] {\r\n    return Exercise.flatAnswerList(this._allAnswersList);\r\n  }\r\n\r\n  protected _getIncludedAnswersOptions(): GAnswer[] {\r\n    return Exercise.flatAnswerList(this._allAnswersList);\r\n  }\r\n}\r\n","import {\r\n  Exercise,\r\n} from '../../Exercise';\r\nimport AnswerList = Exercise.AnswerList;\r\nimport SettingValueType = Exercise.SettingValueType;\r\nimport ExerciseExplanationContent = Exercise.ExerciseExplanationContent;\r\nimport * as _ from 'lodash';\r\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\r\n\r\nexport abstract class BaseExercise<GAnswer extends string = string, GSettings extends { [key: string]: SettingValueType } = { [key: string]: SettingValueType }> implements Exercise.IExercise<GAnswer, GSettings> {\r\n  private _settingsChangeSubject = new ReplaySubject<GSettings>(1);\r\n\r\n  protected _destroy$ = new Subject();\r\n  /**\r\n   * Implementor should implement the desired default settings\r\n   * */\r\n  protected abstract _settings: GSettings;\r\n  protected _settings$: Observable<GSettings> = this._settingsChangeSubject.asObservable();\r\n\r\n  abstract readonly id: string;\r\n  abstract readonly summary: string;\r\n  abstract readonly name: string;\r\n  abstract readonly explanation: ExerciseExplanationContent;\r\n\r\n  abstract getAnswerList(): AnswerList<GAnswer>;\r\n\r\n  abstract getQuestion(): Exercise.Question<GAnswer>;\r\n\r\n  updateSettings(settings: GSettings): void {\r\n    for (let key in this._settings) {\r\n      this._settings[key] = _.isNil(settings[key]) ? this._settings[key] : settings[key];\r\n    }\r\n\r\n    this._settingsChangeSubject.next(settings);\r\n  }\r\n\r\n  getCurrentSettings(): GSettings {\r\n    return this._settings;\r\n  }\r\n\r\n  onDestroy(): void {\r\n    this._destroy$.next();\r\n    this._destroy$.complete();\r\n  }\r\n}\r\n","import {\r\n  BaseTonalChordProgressionExercise,\r\n  BaseTonalChordProgressionExerciseSettings,\r\n  ChordProgressionQuestion\r\n} from './BaseTonalChordProgressionExercise';\r\nimport { Chord, TriadInversion } from '../../utility/music/chords';\r\nimport * as _ from 'lodash';\r\nimport { Note } from 'tone/Tone/core/type/NoteUnits';\r\nimport { PlayAfterCorrectAnswerSetting } from './PlayAfterCorrectAnswerSetting';\r\nimport { Exercise } from '../../Exercise';\r\n\r\nexport type RomanNumeralChord = 'I' | 'ii' | 'iii' | 'IV' | 'V' | 'vi' | 'viiᵒ';\r\n\r\nexport type BaseRomanAnalysisChordProgressionExerciseSettings =\r\n  BaseTonalChordProgressionExerciseSettings<RomanNumeralChord> &\r\n  PlayAfterCorrectAnswerSetting;\r\n\r\nconst chordsInC: { chord: Chord; answer: RomanNumeralChord }[] = [\r\n  {\r\n    chord: new Chord('C'),\r\n    answer: 'I',\r\n  },\r\n  {\r\n    chord: new Chord('Dm'),\r\n    answer: 'ii',\r\n  },\r\n  {\r\n    chord: new Chord('Em'),\r\n    answer: 'iii',\r\n  },\r\n  {\r\n    chord: new Chord('F'),\r\n    answer: 'IV',\r\n  },\r\n  {\r\n    chord: new Chord('G'),\r\n    answer: 'V',\r\n  },\r\n  {\r\n    chord: new Chord('Am'),\r\n    answer: 'vi',\r\n  },\r\n  {\r\n    chord: new Chord('Bdim'),\r\n    answer: 'viiᵒ',\r\n  },\r\n];\r\n\r\nconst romanNumeralToChordInC: { [romanNumeral in RomanNumeralChord]?: Chord } = _.mapValues(_.keyBy(chordsInC, 'answer'), 'chord');\r\n\r\nconst romanNumeralToResolution: {\r\n  [romanNumeral in RomanNumeralChord]: {\r\n    [inversion in 0 | 1 | 2]: ReadonlyArray<{\r\n      romanNumeral: RomanNumeralChord,\r\n      voicingConfig: Omit<Parameters<Chord['getVoicing']>[0], 'withBass'>,\r\n    }>;\r\n  }\r\n} = {\r\n  I: {\r\n    0: [],\r\n    1: [],\r\n    2: [\r\n      {\r\n        romanNumeral: 'I',\r\n        voicingConfig: {topVoicesInversion: TriadInversion.Octave},\r\n      },\r\n    ],\r\n  },\r\n  ii: {\r\n    0: [\r\n      {\r\n        romanNumeral: 'V',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Third,\r\n        },\r\n      },\r\n      {\r\n        romanNumeral: 'I',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Octave,\r\n          octave: 5,\r\n        },\r\n      },\r\n    ],\r\n    1: [\r\n      {\r\n        romanNumeral: 'V',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Fifth,\r\n        },\r\n      },\r\n      {\r\n        romanNumeral: 'I',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Octave,\r\n        },\r\n      },\r\n    ],\r\n    2: [\r\n      {\r\n        romanNumeral: 'V',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Octave,\r\n        },\r\n      },\r\n      {\r\n        romanNumeral: 'I',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Fifth,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  iii: {\r\n    0: [\r\n      {\r\n        romanNumeral: 'IV',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Fifth,\r\n          octave: 5,\r\n        },\r\n      },\r\n      {\r\n        romanNumeral: 'V',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Third,\r\n        },\r\n      },\r\n      {\r\n        romanNumeral: 'I',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Octave,\r\n          octave: 5,\r\n        },\r\n      },\r\n    ],\r\n    1: [\r\n      {\r\n        romanNumeral: 'IV',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Fifth,\r\n        },\r\n      },\r\n      {\r\n        romanNumeral: 'V',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Third,\r\n          octave: 3,\r\n        },\r\n      },\r\n      {\r\n        romanNumeral: 'I',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Octave,\r\n        },\r\n      },\r\n    ],\r\n    2: [\r\n      {\r\n        romanNumeral: 'IV',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Third,\r\n        },\r\n      },\r\n      {\r\n        romanNumeral: 'V',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Third,\r\n        },\r\n      },\r\n      {\r\n        romanNumeral: 'I',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Octave,\r\n          octave: 5,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  IV: {\r\n    0: [\r\n      {\r\n        romanNumeral: 'V',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Third,\r\n          octave: 3,\r\n        },\r\n      },\r\n      {\r\n        romanNumeral: 'I',\r\n        voicingConfig: {topVoicesInversion: TriadInversion.Octave},\r\n      },\r\n    ],\r\n    1: [\r\n      {\r\n        romanNumeral: 'V',\r\n        voicingConfig: {topVoicesInversion: TriadInversion.Fifth},\r\n      },\r\n      {\r\n        romanNumeral: 'I',\r\n        voicingConfig: {topVoicesInversion: TriadInversion.Octave},\r\n      },\r\n    ],\r\n    2: [\r\n      {\r\n        romanNumeral: 'V',\r\n        voicingConfig: {topVoicesInversion: TriadInversion.Third},\r\n      },\r\n      {\r\n        romanNumeral: 'I',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Octave,\r\n          octave: 5,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  V: {\r\n    0: [{\r\n      romanNumeral: 'I',\r\n      voicingConfig: {topVoicesInversion: TriadInversion.Octave},\r\n    }],\r\n    1: [{\r\n      romanNumeral: 'I',\r\n      voicingConfig: {\r\n        topVoicesInversion: TriadInversion.Octave,\r\n        octave: 5,\r\n      },\r\n    }],\r\n    2: [{\r\n      romanNumeral: 'I',\r\n      voicingConfig: {\r\n        topVoicesInversion: TriadInversion.Octave,\r\n        octave: 5,\r\n      },\r\n    }],\r\n  },\r\n  vi: {\r\n    0: [\r\n      {\r\n        romanNumeral: 'V',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Fifth,\r\n        },\r\n      },\r\n      {\r\n        romanNumeral: 'I',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Octave,\r\n        },\r\n      },\r\n    ],\r\n    1: [\r\n      {\r\n        romanNumeral: 'V',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Third,\r\n        },\r\n      },\r\n      {\r\n        romanNumeral: 'I',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Octave,\r\n          octave: 5,\r\n        },\r\n      },\r\n    ],\r\n    2: [\r\n      {\r\n        romanNumeral: 'V',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Third,\r\n          octave: 3,\r\n        },\r\n      },\r\n      {\r\n        romanNumeral: 'I',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Octave,\r\n          octave: 4,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  viiᵒ: {\r\n    0: [\r\n      {\r\n        romanNumeral: 'I',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Fifth,\r\n        }\r\n      }\r\n    ],\r\n    1: [\r\n      {\r\n        romanNumeral: 'I',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Octave,\r\n          octave: 5,\r\n        }\r\n      }\r\n    ],\r\n    2: [\r\n      {\r\n        romanNumeral: 'I',\r\n        voicingConfig: {\r\n          topVoicesInversion: TriadInversion.Octave,\r\n        }\r\n      }\r\n    ],\r\n  }\r\n};\r\n\r\n\r\nexport type RomanNumeralsChordProgressionQuestion = {\r\n  chordProgressionInRomanAnalysis: RomanNumeralChord[]\r\n};\r\n\r\nexport abstract class BaseRomanAnalysisChordProgressionExercise<GSettings extends BaseRomanAnalysisChordProgressionExerciseSettings> extends BaseTonalChordProgressionExercise<RomanNumeralChord, GSettings> {\r\n  protected abstract _getChordProgressionInRomanNumerals(): RomanNumeralsChordProgressionQuestion;\r\n\r\n  protected _getChordProgressionInC(): ChordProgressionQuestion<RomanNumeralChord> {\r\n    const chordProgressionQuestion: RomanNumeralsChordProgressionQuestion = this._getChordProgressionInRomanNumerals();\r\n\r\n    const question: ChordProgressionQuestion<RomanNumeralChord> = {\r\n      segments: chordProgressionQuestion.chordProgressionInRomanAnalysis.map((romanNumeral): {\r\n        chord: Chord,\r\n        answer: RomanNumeralChord,\r\n      } => ({\r\n        chord: romanNumeralToChordInC[romanNumeral]!,\r\n        answer: romanNumeral,\r\n      })),\r\n    };\r\n\r\n    if (question.segments.length === 1 && this._settings.playAfterCorrectAnswer) {\r\n      question.afterCorrectAnswer = ({firstChordInversion}) => {\r\n        // calculate resolution\r\n        const firstChordRomanNumeral: RomanNumeralChord = question.segments[0].answer;\r\n        const resolution: {\r\n          romanNumeral: RomanNumeralChord,\r\n          chordVoicing: Note[],\r\n        }[] = [\r\n          {\r\n            romanNumeral: firstChordRomanNumeral,\r\n            chordVoicing: question.segments[0].chord.getVoicing({\r\n              topVoicesInversion: firstChordInversion,\r\n              withBass: this._settings.includeBass,\r\n            }),\r\n          },\r\n          ...romanNumeralToResolution[firstChordRomanNumeral][firstChordInversion].map(chord => ({\r\n            romanNumeral: chord.romanNumeral,\r\n            chordVoicing: romanNumeralToChordInC[chord.romanNumeral]!.getVoicing({\r\n              ...chord.voicingConfig,\r\n              withBass: this._settings.includeBass,\r\n            }),\r\n          })),\r\n        ];\r\n\r\n        return resolution.map(({\r\n                                 romanNumeral,\r\n                                 chordVoicing,\r\n                               }, index) => ({\r\n          answerToHighlight: romanNumeral,\r\n          partToPlay: [{\r\n            notes: chordVoicing,\r\n            duration: index === resolution.length - 1 ? '2n' : '4n',\r\n            velocity: 0.3,\r\n          }],\r\n        }));\r\n      };\r\n    }\r\n\r\n    return question;\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   * */\r\n  protected _getDefaultSettings(): GSettings {\r\n    return {\r\n      ...super._getDefaultSettings(),\r\n      playAfterCorrectAnswer: false,\r\n    };\r\n  }\r\n\r\n  protected _getAllAnswersList(): Exercise.AnswerList<RomanNumeralChord> {\r\n    return {\r\n      rows: [\r\n        [\r\n          'I',\r\n          'ii',\r\n          'iii',\r\n          'IV',\r\n          'V',\r\n          'vi',\r\n          'viiᵒ',\r\n        ]\r\n      ]\r\n    }\r\n  }\r\n}\r\n","import { BaseTonalExercise, BaseTonalExerciseSettings } from './BaseTonalExercise';\r\nimport { Exercise } from '../../Exercise';\r\nimport { randomFromList, StaticOrGetter, toGetter, } from '../../../shared/ts-utility';\r\nimport * as _ from 'lodash';\r\nimport { Chord, ChordSymbol, voiceChordProgressionWithVoiceLeading, } from '../../utility/music/chords';\r\nimport { Note } from 'tone/Tone/core/type/NoteUnits';\r\nimport { NoteEvent } from '../../../services/player.service';\r\nimport { getInterval, NotesRange, } from '../../utility';\r\nimport { transpose } from '../../utility/music/transpose';\r\nimport { Interval } from '../../utility/music/intervals/Interval';\r\n\r\nexport type BaseTonalChordProgressionExerciseSettings<GAnswer extends string> = BaseTonalExerciseSettings<GAnswer> & {\r\n  voiceLeading: 'RANDOM' | 'CORRECT';\r\n  includedPositions: (0 | 1 | 2)[];\r\n  includeBass: boolean;\r\n}\r\n\r\nexport interface ChordProgressionQuestion<GAnswer extends string> {\r\n  segments: {\r\n    chord: Chord;\r\n    answer: GAnswer;\r\n  }[],\r\n  afterCorrectAnswer?: StaticOrGetter<{\r\n    partToPlay: NoteEvent[],\r\n    answerToHighlight?: GAnswer,\r\n  }[], [{\r\n    firstChordInversion: 0 | 1 | 2,\r\n  }]>;\r\n}\r\n\r\nexport abstract class BaseTonalChordProgressionExercise<GAnswer extends string, GSettings extends BaseTonalChordProgressionExerciseSettings<GAnswer>> extends BaseTonalExercise<GAnswer, GSettings> {\r\n  protected _settings: GSettings = {\r\n    ...this._settings,\r\n    voiceLeading: 'CORRECT',\r\n    includedPositions: [0, 1, 2],\r\n    includeBass: true,\r\n  };\r\n  private readonly _range = new NotesRange('G3', 'E5');\r\n\r\n  getQuestionInC(): Exclude<Exercise.Question<GAnswer>, \"cadence\"> {\r\n    const chordProgression: ChordProgressionQuestion<GAnswer> = this._getChordProgressionInC();\r\n\r\n    const firstChordInversion: 0 | 1 | 2 = randomFromList(this._settings.includedPositions);\r\n\r\n    const voiceChordProgression = (chordOrChordSymbolList: (ChordSymbol | Chord)[]): Note[][] => {\r\n      if (this._settings.voiceLeading === 'CORRECT') {\r\n        return voiceChordProgressionWithVoiceLeading(chordOrChordSymbolList, firstChordInversion, {\r\n          withBass: this._settings.includeBass,\r\n        });\r\n      }\r\n\r\n      const getAllVoicingsInRange = (chord: Chord, params: Parameters<Chord['getVoicing']>[0]): Note[][] => {\r\n        const voicing: Note[] = chord.getVoicing(params);\r\n        const bassNotes: Note[] = [];\r\n        if (params.withBass) {\r\n          bassNotes.push(voicing.shift()!);\r\n          bassNotes.push(voicing.shift()!);\r\n        }\r\n\r\n        let lowestVoicing = voicing;\r\n\r\n        while (this._range.isInRange(transpose(lowestVoicing, -Interval.Octave))) {\r\n          lowestVoicing = transpose(lowestVoicing, -Interval.Octave);\r\n        }\r\n\r\n        const possibleVoicingList = [lowestVoicing];\r\n\r\n        while (this._range.isInRange(transpose(_.last(possibleVoicingList)!, +Interval.Octave))) {\r\n          possibleVoicingList.push(transpose(_.last(possibleVoicingList)!, +Interval.Octave));\r\n        }\r\n\r\n        return possibleVoicingList.map(possibleVoicing => [\r\n          ...bassNotes,\r\n          ...possibleVoicing,\r\n        ]);\r\n      }\r\n\r\n      const voicingList: Note[][] = [randomFromList(getAllVoicingsInRange(chordProgression.segments[0].chord, {\r\n        topVoicesInversion: firstChordInversion,\r\n        withBass: this._settings.includeBass,\r\n      }))];\r\n\r\n      for (let i = 1; voicingList.length < chordProgression.segments.length; i++) {\r\n        const lastVoicing: Note[] = voicingList[i - 1];\r\n        const possibleNextVoicingList: (Note[])[] = getAllVoicingsInRange(chordProgression.segments[i].chord, {\r\n          topVoicesInversion: randomFromList(this._settings.includedPositions),\r\n          withBass: this._settings.includeBass,\r\n        });\r\n\r\n        const validNextVoicingList: (Note[])[] = possibleNextVoicingList.filter(possibleNextVoicing => {\r\n          const lastVoicingHighestNote: Note = _.last(lastVoicing)!;\r\n          const nextVoicingHighestNote: Note = _.last(possibleNextVoicing)!;\r\n          return getInterval(lastVoicingHighestNote, nextVoicingHighestNote) <= Interval.PerfectFifth;\r\n        })\r\n\r\n        voicingList.push(randomFromList(_.isEmpty(validNextVoicingList) ? possibleNextVoicingList: validNextVoicingList));\r\n      }\r\n\r\n      return voicingList;\r\n    }\r\n\r\n    const question: Exclude<Exercise.Question<GAnswer>, \"cadence\"> = {\r\n      segments: voiceChordProgression(_.map(chordProgression.segments, 'chord'))\r\n        .map((voicing: Note[], index: number): Exercise.Question<GAnswer>['segments'][0] => {\r\n          return {\r\n            rightAnswer: chordProgression.segments[index].answer,\r\n            partToPlay: [{\r\n              notes: voicing,\r\n              velocity: 0.3,\r\n              duration: '2n',\r\n            }],\r\n          }\r\n        }),\r\n    }\r\n\r\n    if (chordProgression.afterCorrectAnswer) {\r\n      question.afterCorrectAnswer = toGetter(chordProgression.afterCorrectAnswer)({\r\n        firstChordInversion,\r\n      });\r\n    }\r\n\r\n    return question;\r\n  }\r\n\r\n  protected abstract _getChordProgressionInC(): ChordProgressionQuestion<GAnswer>;\r\n\r\n  protected _getSettingsDescriptor(): Exercise.SettingsControlDescriptor<GSettings>[] {\r\n    return [\r\n      ...super._getSettingsDescriptor(),\r\n      {\r\n        key: 'voiceLeading',\r\n        descriptor: {\r\n          controlType: 'SELECT',\r\n          label: 'Voice Leading',\r\n          options: [\r\n            {\r\n              label: 'Random',\r\n              value: 'RANDOM',\r\n            },\r\n            {\r\n              label: 'Smooth',\r\n              value: 'CORRECT',\r\n            }\r\n          ],\r\n        },\r\n      },\r\n      {\r\n        key: 'includeBass',\r\n        descriptor: {\r\n          controlType: 'CHECKBOX',\r\n          label: 'Include Bass',\r\n        }\r\n      },\r\n      {\r\n        key: 'includedPositions' as const,\r\n        descriptor: {\r\n          controlType: 'LIST_SELECT',\r\n          label: 'Included Positions (top voices)',\r\n          allOptions: [\r\n            {\r\n              value: 0,\r\n              label: 'Root Position',\r\n            },\r\n            {\r\n              value: 1,\r\n              label: '1st Inversion'\r\n            },\r\n            {\r\n              value: 2,\r\n              label: '2nd Inversion',\r\n            }\r\n          ],\r\n        },\r\n      },\r\n    ]\r\n  }\r\n}\r\n","import {\r\n  Key,\r\n  randomFromList\r\n} from '../../utility';\r\nimport { Exercise, } from '../../Exercise';\r\nimport { transpose } from '../../utility/music/transpose';\r\nimport { getDistanceOfKeys } from '../../utility/music/keys/getDistanceOfKeys';\r\nimport { iv_V_i_CADENCE_IN_C, IV_V_I_CADENCE_IN_C } from '../../utility/music/chords';\r\nimport {\r\n  BaseCommonSettingsExercise,\r\n  BaseCommonSettingsExerciseSettings\r\n} from './BaseCommonSettingsExercise';\r\nimport { NoteEvent } from '../../../services/player.service';\r\n\r\ntype CadenceType = 'I IV V I' | 'i iv V i';\r\n\r\nexport type BaseTonalExerciseSettings<GAnswer extends string> = BaseCommonSettingsExerciseSettings<GAnswer> & {\r\n  cadenceType: CadenceType;\r\n}\r\n\r\nconst cadenceTypeToCadence: {\r\n  [k in CadenceType]: NoteEvent[]\r\n} = {\r\n  'I IV V I': IV_V_I_CADENCE_IN_C,\r\n  'i iv V i': iv_V_i_CADENCE_IN_C,\r\n}\r\n\r\nexport abstract class BaseTonalExercise<GAnswer extends string = string, GSettings extends BaseTonalExerciseSettings<GAnswer> = BaseTonalExerciseSettings<GAnswer>> extends BaseCommonSettingsExercise<GAnswer, GSettings> {\r\n  readonly key: Key = randomFromList(['C', 'G', 'D', 'A', 'E', 'B', 'F#', 'Db', 'Ab', 'Eb', 'Bb', 'F']);\r\n  abstract getQuestionInC(): Exclude<Exercise.Question<GAnswer>, 'cadence'>;\r\n\r\n  getQuestion(): Exercise.Question<GAnswer> {\r\n    const randomQuestionInC: Exclude<Exercise.Question<GAnswer>, 'cadence'> = this.getQuestionInC();\r\n    const selectedCadence = cadenceTypeToCadence[this._settings.cadenceType];\r\n    return {\r\n      segments: randomQuestionInC.segments.map(segment => ({\r\n        rightAnswer: segment.rightAnswer,\r\n        partToPlay: transpose(segment.partToPlay, getDistanceOfKeys(this.key, 'C')),\r\n      })),\r\n      cadence: transpose(selectedCadence, getDistanceOfKeys(this.key, 'C')),\r\n      afterCorrectAnswer: randomQuestionInC.afterCorrectAnswer?.map(afterCorrectAnswerSegment => ({\r\n        answerToHighlight: afterCorrectAnswerSegment.answerToHighlight,\r\n        partToPlay: transpose(afterCorrectAnswerSegment.partToPlay, getDistanceOfKeys(this.key, 'C')),\r\n      }))\r\n    }\r\n  }\r\n\r\n  protected _getSettingsDescriptor(): Exercise.SettingsControlDescriptor<GSettings>[] {\r\n    return [\r\n      {\r\n        key: 'cadenceType',\r\n        descriptor: {\r\n          controlType: 'SELECT',\r\n          label: 'Cadence Type',\r\n          options: [\r\n            {\r\n              value: 'I IV V I',\r\n              label: 'I IV V I (Major)',\r\n            },\r\n            {\r\n              value: 'i iv V i',\r\n              label: 'i iv V i (Minor)',\r\n            },\r\n          ]\r\n        }\r\n      },\r\n      ...super._getSettingsDescriptor(),\r\n    ];\r\n  }\r\n\r\n  protected _getDefaultSettings(): GSettings {\r\n    return {\r\n      ...super._getDefaultSettings(),\r\n      cadenceType: 'I IV V I',\r\n    };\r\n  }\r\n}\r\n","import { Exercise } from '../../Exercise';\r\n\r\nexport type NumberOfSegmentsSetting = {\r\n  numberOfSegments: number;\r\n};\r\n\r\nexport const numberOfSegmentsControlDescriptorList = (name: string): Exercise.SettingsControlDescriptor<NumberOfSegmentsSetting>[] => ([\r\n  {\r\n    key: 'numberOfSegments',\r\n    descriptor: {\r\n      controlType: 'SLIDER',\r\n      label: `Number of ${name}`,\r\n      min: 1,\r\n      max: 8,\r\n      step: 1,\r\n    },\r\n  }\r\n]);\r\n","import { Exercise } from '../../Exercise';\r\n\r\nexport type PlayAfterCorrectAnswerSetting = {\r\n  playAfterCorrectAnswer: boolean;\r\n}\r\n\r\nexport const playAfterCorrectAnswerControlDescriptorList = <GSettings extends PlayAfterCorrectAnswerSetting>(param?: {\r\n  show?: (settings: GSettings) => boolean,\r\n}): Exercise.SettingsControlDescriptor<PlayAfterCorrectAnswerSetting>[] => ([\r\n  {\r\n    key: 'playAfterCorrectAnswer',\r\n    show: param?.show || undefined,\r\n    descriptor: {\r\n      controlType: 'CHECKBOX',\r\n      label: `Play Resolution`,\r\n    },\r\n  }\r\n]);\r\n","import { Injectable, Type } from '@angular/core';\r\nimport * as _ from 'lodash';\r\nimport { IntervalExercise } from '../../exercises/IntervalExercise/IntervalExercise';\r\nimport IExercise = Exercise.IExercise;\r\nimport { Exercise } from '../../Exercise';\r\nimport { ChordsInKeyExercise } from '../../exercises/ChordInKeyExercise/ChordsInKeyExercise';\r\nimport { NotesInKeyExercise } from '../../exercises/NotesInKeyExercise/NotesInKeyExercise';\r\nimport { ChordTypeInKeyExercise } from '../../exercises/ChordTypeInKeyExercise/ChordTypeInKeyExercise';\r\nimport { TriadInversionExercise } from '../../exercises/TriadInversionExercise/TriadInversionExercise';\r\nimport {\r\n  CommonChordProgressionsExercise\r\n} from '../../exercises/CommonChordProgressionExercise/CommonChordProgressionsExercise';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExerciseService {\r\n  static readonly _exerciseList: IExercise[] = [\r\n    new NotesInKeyExercise() as unknown as IExercise, // TODO(OE-27)\r\n    new ChordsInKeyExercise() as unknown as IExercise, // TODO(OE-27)\r\n    new CommonChordProgressionsExercise() as unknown as IExercise, // TODO(OE-27)\r\n    new ChordTypeInKeyExercise() as unknown as IExercise, // TODO(OE-27)\r\n    new TriadInversionExercise() as unknown as IExercise, // TODO(OE-27)\r\n    new IntervalExercise() as unknown as IExercise, // TODO(OE-27)\r\n  ];\r\n  private readonly _exerciseIdToExercise = _.keyBy(ExerciseService._exerciseList, 'id');\r\n  static readonly ngComponents: Type<any>[] = ExerciseService._exerciseList\r\n    .map(exercise => exercise.explanation)\r\n    .filter((explanation): explanation is Type<any> => !!explanation && typeof explanation != 'string')\r\n\r\n  constructor() {\r\n  }\r\n\r\n  getExercise(id: string): IExercise {\r\n    return this._exerciseIdToExercise[id];\r\n  }\r\n\r\n  getExerciseList(): IExercise[] {\r\n    return ExerciseService._exerciseList;\r\n  }\r\n}\r\n","import { NoteType } from '../../notes/NoteType';\r\nimport { transpose } from '../../transpose';\r\nimport { Note } from 'tone/Tone/core/type/NoteUnits';\r\nimport { noteTypeToNote } from '../../notes/noteTypeToNote';\r\nimport * as _ from 'lodash';\r\nimport { getNoteOctave } from '../../notes/getNoteOctave';\r\nimport { Interval } from '../../intervals/Interval';\r\n\r\nexport type ChordType = 'M' | 'm' | 'dim';\r\n\r\nexport type ChordSymbol = `${NoteType}${Exclude<ChordType, 'M'> | ''}`;\r\n\r\nexport enum TriadInversion {\r\n  Fifth = 0,\r\n  Octave = 1,\r\n  Third = 2,\r\n}\r\n\r\nexport class Chord {\r\n  readonly root: NoteType = this._getChordRoot();\r\n  readonly type: ChordType = this._getChordType();\r\n  readonly intervals: Interval[] = this._getChordIntervals();\r\n  readonly noteTypes: NoteType[] = this._getNoteTypes();\r\n\r\n  constructor(public readonly symbol: ChordSymbol) {\r\n  }\r\n\r\n  private _getChordRoot(): NoteType {\r\n    return this.symbol.match(/^[A-G](?:#|b|)/)?.[0] as NoteType;\r\n  }\r\n\r\n  private _getChordType(): ChordType {\r\n    return this.symbol.includes('dim') ? 'dim' :\r\n      this.symbol.includes('m') ? 'm' : 'M';\r\n  }\r\n\r\n  private _getChordIntervals(): Interval[] {\r\n    const intervals = [Interval.Prima];\r\n    switch (this.type) {\r\n      case 'm':\r\n      case 'dim':\r\n        intervals.push(Interval.MinorThird);\r\n        break;\r\n      case 'M':\r\n        intervals.push(Interval.MajorThird);\r\n        break;\r\n    }\r\n\r\n    switch (this.type) {\r\n      case 'm':\r\n      case 'M':\r\n        intervals.push(Interval.PerfectFifth);\r\n        break;\r\n      case 'dim':\r\n        intervals.push(Interval.DiminishedFifth);\r\n\r\n    }\r\n    return intervals;\r\n  }\r\n\r\n  private _getNoteTypes(): NoteType[] {\r\n    return this.intervals.map(interval => transpose(this.root, interval));\r\n  }\r\n\r\n  getVoicing({\r\n               topVoicesInversion,\r\n               withBass = true,\r\n               octave = 4,\r\n             }: {\r\n    topVoicesInversion: number,\r\n    withBass?: boolean,\r\n    /**\r\n     * The octave of the soprano voice\r\n     * */\r\n    octave?: number\r\n  }): Note[] {\r\n    if (topVoicesInversion - 1 > this.noteTypes.length) {\r\n      throw new Error(`Invalid inversion ${topVoicesInversion} from chord with notes ${this.noteTypes}`);\r\n    }\r\n\r\n    // first build the chord without inversions\r\n    const rootNote: Note = noteTypeToNote(this.root, 1);\r\n    let chordVoicing: Note[] = this.intervals.map(interval => transpose(rootNote, interval));\r\n\r\n    while (topVoicesInversion) {\r\n      const lowestNote: Note = chordVoicing.shift()!;\r\n      chordVoicing.push(transpose(lowestNote, Interval.Octave));\r\n      topVoicesInversion--;\r\n    }\r\n\r\n    //normalize to the right octave\r\n    const highestVoice: Note = _.last(chordVoicing)!;\r\n    const highestVoiceOctave = getNoteOctave(highestVoice);\r\n    chordVoicing = transpose(chordVoicing, (octave - highestVoiceOctave) * Interval.Octave);\r\n\r\n    if (withBass) {\r\n      return [\r\n        noteTypeToNote(this.root, 2),\r\n        noteTypeToNote(this.root, 3),\r\n        ...chordVoicing,\r\n      ]\r\n    }\r\n\r\n    return chordVoicing;\r\n  }\r\n}\r\n","import { NoteEvent } from '../../../../services/player.service';\r\nimport {\r\n  Chord,\r\n  TriadInversion\r\n} from './Chord/Chord';\r\n\r\nexport const IV_V_I_CADENCE_IN_C: NoteEvent[] = [\r\n  {\r\n    notes: new Chord('C').getVoicing({topVoicesInversion: TriadInversion.Fifth}),\r\n    velocity: 0.3,\r\n  },\r\n  {\r\n    notes: new Chord('F').getVoicing({topVoicesInversion: TriadInversion.Third}),\r\n    velocity: 0.3,\r\n  },\r\n  {\r\n    notes: new Chord('G').getVoicing({topVoicesInversion: TriadInversion.Third}),\r\n    velocity: 0.3,\r\n  },\r\n  {\r\n    notes: new Chord('C').getVoicing({topVoicesInversion: TriadInversion.Octave, octave: 5}),\r\n    duration: '2n',\r\n    velocity: 0.3,\r\n  }\r\n]\r\n\r\nexport const iv_V_i_CADENCE_IN_C: NoteEvent[] = [\r\n  {\r\n    notes: new Chord('Cm').getVoicing({topVoicesInversion: TriadInversion.Fifth}),\r\n    velocity: 0.3,\r\n  },\r\n  {\r\n    notes: new Chord('Fm').getVoicing({topVoicesInversion: TriadInversion.Third}),\r\n    velocity: 0.3,\r\n  },\r\n  {\r\n    notes: new Chord('G').getVoicing({topVoicesInversion: TriadInversion.Third}),\r\n    velocity: 0.3,\r\n  },\r\n  {\r\n    notes: new Chord('Cm').getVoicing({topVoicesInversion: TriadInversion.Octave, octave: 5}),\r\n    duration: '2n',\r\n    velocity: 0.3,\r\n  }\r\n]\r\n","export * from './voiceChordProgressionWithVoiceLeading';\r\nexport * from './Chord/Chord';\r\nexport * from './chordProgressions';\r\n","import { Note } from 'tone/Tone/core/type/NoteUnits';\r\nimport {\r\n  Chord,\r\n  ChordSymbol\r\n} from './Chord/Chord';\r\nimport { toNoteNumber } from '../notes/toNoteName';\r\nimport * as _ from 'lodash';\r\nimport { NoteType } from '../notes/NoteType';\r\nimport { noteTypeToNote } from '../notes/noteTypeToNote';\r\nimport { transpose } from '../transpose';\r\nimport { randomFromList } from '../../../../shared/ts-utility';\r\nimport { Interval } from '../intervals/Interval';\r\n\r\nconst MAX_AVG_VOICE_MOVEMENT = 8 / 3;\r\n\r\nfunction voiceNextChord(currentChordVoicing: Note[], nextChord: Chord): Note[] {\r\n  const highestVoice: Note = _.last(currentChordVoicing)!;\r\n  const voicingOptionsForNextChord: Note[][] = [];\r\n  for (let i = 0; i < nextChord.noteTypes.length; i++) {\r\n    let possibleVoicing: Note[] = nextChord.getVoicing({\r\n      topVoicesInversion: i,\r\n      withBass: false,\r\n    });\r\n    // normalized for preferred octave, i.e. when the the soprano voice is the closest\r\n    const highestNoteOfPossibleVoicing = _.last(possibleVoicing)!;\r\n    possibleVoicing = transpose(possibleVoicing, _.round((toNoteNumber(highestVoice) - toNoteNumber(highestNoteOfPossibleVoicing)) / Interval.Octave) * Interval.Octave)\r\n    voicingOptionsForNextChord.push(possibleVoicing);\r\n  }\r\n\r\n  // filter valid voicing (that has small movements in voices)\r\n  const validVoicingOptions: Note[][] = voicingOptionsForNextChord.filter((voicingOption: Note[]): boolean => {\r\n    if (voicingOption.length !== currentChordVoicing.length) {\r\n      throw new Error(`voicing of different length not supported`); // (for now)\r\n    }\r\n    const rank: number = _.sum(voicingOption.map((voice: Note, index: number): number => {\r\n      return Math.abs(toNoteNumber(voice) - toNoteNumber(currentChordVoicing[index]));\r\n    }));\r\n\r\n    return (rank / voicingOption.length <= MAX_AVG_VOICE_MOVEMENT);\r\n  });\r\n\r\n  return randomFromList(validVoicingOptions);\r\n}\r\n\r\nexport function voiceChordProgressionWithVoiceLeading(chordOrChordSymbolList: (ChordSymbol | Chord)[], startingTopVoicesInversion: number = 0, options: {withBass: boolean} = {withBass: true}): Note[][] {\r\n  const chordList: Chord[] = chordOrChordSymbolList.map((chordOrChordSymbol): Chord => {\r\n    if (chordOrChordSymbol instanceof Chord) {\r\n      return chordOrChordSymbol;\r\n    }\r\n    return new Chord(chordOrChordSymbol);\r\n  })\r\n  const chordVoicingWithoutBass: Note[][] = [chordList[0].getVoicing({\r\n    topVoicesInversion: startingTopVoicesInversion,\r\n    withBass: false,\r\n  })];\r\n  for (let i = 1; i < chordList.length; i++) {\r\n    const nextChordVoicing: Note[] = voiceNextChord(chordVoicingWithoutBass[i - 1], chordList[i]);\r\n    if (!nextChordVoicing) {\r\n      throw new Error(`Voicing is undefined`);\r\n    }\r\n    chordVoicingWithoutBass.push(nextChordVoicing);\r\n  }\r\n  // adding bass notes\r\n  return chordVoicingWithoutBass.map((chordVoicing: Note[], index): Note[] => {\r\n    const rootNote: NoteType = chordList[index].root;\r\n    return [\r\n      ...(options.withBass ? [\r\n        noteTypeToNote(rootNote, 2),\r\n        noteTypeToNote(rootNote, 3),\r\n      ] : []),\r\n      ...chordVoicing,\r\n    ]\r\n  });\r\n}\r\n","import { Note } from 'tone/Tone/core/type/NoteUnits';\r\n\r\nexport function getNoteOctave(note: Note): number {\r\n  return +note.match(/\\d+/g)![0];\r\n}\r\n","export default \"<p>\\r\\n  In this exercise you will be given a series of chords (cadence) to establish a tonal center.\\r\\n  Then a chord would be played, and you will be asked to pick the roman analysis (degree) of the chord in the context of the key.\\r\\n</p>\\r\\n<app-info-panel>\\r\\n  <b>Tip!</b> Every chord has its own sensation of tension/release.\\r\\n  The 'I' chord feels most at rest, while the 'V' has tension - it \\\"wants\\\" to move.\\r\\n</app-info-panel>\\r\\n<app-collapsible>\\r\\n  <h2>Triads & Roman Numerals</h2>\\r\\n  <p>\\r\\n    Triadic chords are chords built from 3 notes using thirds.\\r\\n  </p>\\r\\n  <p>\\r\\n    For example, in the key of C major, we can form this chord:\\r\\n  </p>\\r\\n  <app-info-panel>\\r\\n    <b>C</b> D <b>E</b> F <b>G</b> A B\\r\\n  </app-info-panel>\\r\\n  <p>\\r\\n    Because it is built starting from the first degree (Tonic note) <b>it is called the 'I' (one) chord</b>.\\r\\n    The 'I' chord is most \\\"at rest\\\", and holds no tension.\\r\\n  </p>\\r\\n  <ion-button\\r\\n    [color]=\\\"'light'\\\"\\r\\n    [playOnClick]=\\\"cadenceAndIChord\\\"\\r\\n  >\\r\\n    Cadence + 'I' chord\\r\\n  </ion-button>\\r\\n  <p>\\r\\n    We can also build a triad from the 5th degree to form a 'V' (five) chord.\\r\\n    Notice how this chord holds tension, and wants to resolve to the tonic.\\r\\n  </p>\\r\\n  <ion-button\\r\\n    [color]=\\\"'light'\\\"\\r\\n    [playOnClick]=\\\"cadenceAndVChord\\\"\\r\\n  >\\r\\n    Cadence + 'V' chord\\r\\n  </ion-button>\\r\\n  <p>\\r\\n    Because the chord sensation is dependant on the key,\\r\\n    we use Roman numerals to indicate chords numbers in an arbitrary key.\\r\\n  </p>\\r\\n  <p>\\r\\n    Note that we use lower-case to indicate the minor chords (ii, iii and vi), and ᵒ to indicate diminished chords (viiᵒ)\\r\\n  </p>\\r\\n</app-collapsible>\\r\\n\";","export default \"<p>\\r\\n  In this exercise you will be required to identify the type of a chord being played. Here are the possible types:\\r\\n</p>\\r\\n<ul>\\r\\n  <li><b>M - Major.</b> Example: C-E-G</li>\\r\\n  <li><b>m - Minor.</b> Example: A-C-E</li>\\r\\n</ul>\\r\\n<app-info-panel>\\r\\n  <b>Tip! Major chords tend to sound \\\"brighter\\\" and minor chords tend to sound \\\"darker\\\".</b>\\r\\n  But beware - the feeling of the chord also depends on context.\\r\\n</app-info-panel>\\r\\n<p>\\r\\n  All chords in this exercise will be <b>from the same key</b> -\\r\\n  This to simulate a real music situation where chords are not being picked at random, but usually belong to the same key.\\r\\n</p>\\r\\n\";","export default \"<app-info-panel>\\r\\n  If you haven't already - check out the <a routerLink=\\\"./chordInKey\\\">Chord in Key</a> exercise for a basic introduction to chord progressions and Roman Analysis.\\r\\n</app-info-panel>\\r\\n\\r\\n<p>\\r\\n  In this exercise, you can choose from a set of predefined progressions to practice.\\r\\n</p>\\r\\n<p>\\r\\n  The available progressions are one of the most popular chord progressions in popular music. If you think there is an important progression we missed, feel free to\\r\\n  <a href=\\\"https://github.com/ShacharHarshuv/open-ear/issues\\\">open an issue in Github</a> or <a href=\\\"https://github.com/ShacharHarshuv/open-ear#readme\\\">create a pull request</a>\\r\\n</p>\\r\\n\\r\\n<app-info-panel>\\r\\n  <b>Tip!</b> Try to think of songs you know that use each progression.\\r\\n</app-info-panel>\\r\\n\";","export default \"<p>\\r\\n  In the following exercise <b>two notes will be played</b>, and you will be required\\r\\n  to specify the interval between them.\\r\\n</p>\\r\\n<app-info-panel>\\r\\n  <b>Tip!</b> Try to recall songs / melodies you know that starts which each interval.\\r\\n</app-info-panel>\\r\\n<p>\\r\\n  If you're just starting out, it's recommended to limit to amount of possible\\r\\n  intervals. That can be done in the exercise settings (<ion-icon name=\\\"settings-outline\\\"></ion-icon>)\\r\\n</p>\\r\\n\\r\\n<h2>List of Intervals: </h2>\\r\\n\\r\\n<p>(Click to play)</p>\\r\\n\\r\\n<ion-list>\\r\\n  <ng-container *ngFor=\\\"let interval of intervalDescriptorList\\\">\\r\\n    <ion-item button [playOnClick]=\\\"interval.toPlay\\\">\\r\\n      {{interval.name}}\\r\\n    </ion-item>\\r\\n  </ng-container>\\r\\n</ion-list>\\r\\n\";","export default \"<p>\\r\\n  In this exercise you will be given a series of chords (cadence) to establish a tonal center.\\r\\n  Then a note (or a series of notes) will be played and you will be asked to find the scale degree of the note.\\r\\n</p>\\r\\n\\r\\n<app-info-panel>\\r\\n  <b>Tip!</b> If you're just starting out, it's better to practice on just a few scale degrees. Starting from Do, Re\\r\\n  and Mi is recommended.\\r\\n</app-info-panel>\\r\\n<app-collapsible>\\r\\n  <h2>Scales and scale degrees</h2>\\r\\n  <p>\\r\\n    The major scale consist of 7 notes that are built from the following intervals:\\r\\n  </p>\\r\\n  <app-info-panel>\\r\\n    tone - tone - semitone - tone - tone - tone - semitone\\r\\n  </app-info-panel>\\r\\n  <p>\\r\\n    For example, the C major scale, consists of the following notes:\\r\\n  </p>\\r\\n  <app-info-panel>\\r\\n    C D E F G A B\\r\\n  </app-info-panel>\\r\\n  <p>\\r\\n    The first note of the scale - also called the tonic - is the \\\"home\\\" note.\\r\\n    The note that will feel most \\\"resolves\\\" and at \\\"rest\\\".\\r\\n  </p>\\r\\n  <p>\\r\\n    Any other note will have a specific \\\"tension\\\" or \\\"sensation\\\" in relation to the tonic note.\\r\\n    It might feel as if the note \\\"wants\\\" to resolve to the tonic note.\\r\\n  </p>\\r\\n  <p>\\r\\n    In this example a group of chords will be played to let your mind feel C as the \\\"root note\\\".\\r\\n    Then the note D will be played, listen to its sense of tension, like it wants to resolve down to C.\\r\\n  </p>\\r\\n  <ion-button\\r\\n    [color]=\\\"'light'\\\"\\r\\n    [playOnClick]=\\\"resolutionOfReInC\\\"\\r\\n  >\\r\\n    Play\\r\\n  </ion-button>\\r\\n  <p>\\r\\n    In the key of D however, D is the tonic, so it assumes a sensation of rest.\\r\\n    To avoid confusion between different keys, <b>we use solfege syllables.</b>\\r\\n  </p>\\r\\n  <p>\\r\\n    Each syllable represents a different <b>degree</b> in the scale.\\r\\n  </p>\\r\\n  <ul>\\r\\n    <li><b>Do</b> - 1st Degree (C in C major)</li>\\r\\n    <li><b>Re</b> - 2nd Degree (D in C major)</li>\\r\\n    <li><b>Mi</b> - 3rd Degree (E in C major)</li>\\r\\n    <li><b>Fa</b> - 4th Degree (F in C major)</li>\\r\\n    <li><b>Sol</b> - 5th Degree (G in C major)</li>\\r\\n    <li><b>La</b> - 6th Degree (A in C major)</li>\\r\\n    <li><b>Ti</b> - 7th Degree (B in C major)</li>\\r\\n  </ul>\\r\\n  <p>\\r\\n    After getting a correct answer, the app will play a resolution of the note to the tonic,\\r\\n    to enforce your memory and sensation of tension and release.\\r\\n  </p>\\r\\n  <app-info-panel>\\r\\n    If you're finding it hard to accomplish, try sing the note and resolve it to the nearest tonic, either above or\\r\\n    below.\\r\\n  </app-info-panel>\\r\\n</app-collapsible>\\r\\n\";","export default \"<p>\\r\\n  In this exercise you will hear a triad in one of the three possible inversions,\\r\\n  and you will need to identify what inversion it is.\\r\\n</p>\\r\\n<p>\\r\\n  An inversion is the order of which the chord notes are played (from lowest to highest).\\r\\n</p>\\r\\n<p>\\r\\n  Here are the possible inversions:\\r\\n</p>\\r\\n<ul>\\r\\n  <li><b>Root position</b> (Example: C E G). Also called: 5th position</li>\\r\\n  <li><b>First inversion</b> (Example: E G C). Also called: Octave position</li>\\r\\n  <li><b>Second inversion</b> (Example: G C E). Also called: 3rd position</li>\\r\\n</ul>\\r\\n<app-info-panel>\\r\\n  If you're just starting out, check out the \\\"Arpeggiate Speed\\\" field in the settings.\\r\\n</app-info-panel>\\r\\n<!--Consider if this is needed or not-->\\r\\n<!--<p>\\r\\n  All chords in this exercise will be <b>from the same key</b> -\\r\\n  This to simulate a real music situation where chords are not being picked at random, but usually belong to the same key.\\r\\n</p>-->\\r\\n\";"],"sourceRoot":"webpack:///"}